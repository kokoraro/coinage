// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Bitcoin Tracker app renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BitcoinTracker />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="container"
        >
          <h1>
            coinage
          </h1>
          <CoinList
            addOpen={false}
            coinData={
              Array [
                Object {
                  "code": "...",
                  "id": 0,
                  "name": "Loading",
                  "price": 0,
                },
              ]
            }
            currDollar={true}
            handleDelete={[Function]}
          />
          <ControlPanel
            addOpen={false}
            handleAddCoins={[Function]}
            handleCurrency={[Function]}
            handleRefresh={[Function]}
            selectCoins={Array []}
            toggleAddOpen={[Function]}
          />
        </div>,
        <Footer />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1>
              coinage
            </h1>,
            <CoinList
              addOpen={false}
              coinData={
                Array [
                  Object {
                    "code": "...",
                    "id": 0,
                    "name": "Loading",
                    "price": 0,
                  },
                ]
              }
              currDollar={true}
              handleDelete={[Function]}
            />,
            <ControlPanel
              addOpen={false}
              handleAddCoins={[Function]}
              handleCurrency={[Function]}
              handleRefresh={[Function]}
              selectCoins={Array []}
              toggleAddOpen={[Function]}
            />,
          ],
          "className": "container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "coinage",
            },
            "ref": null,
            "rendered": "coinage",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "addOpen": false,
              "coinData": Array [
                Object {
                  "code": "...",
                  "id": 0,
                  "name": "Loading",
                  "price": 0,
                },
              ],
              "currDollar": true,
              "handleDelete": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "addOpen": false,
              "handleAddCoins": [Function],
              "handleCurrency": [Function],
              "handleRefresh": [Function],
              "selectCoins": Array [],
              "toggleAddOpen": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="container"
          >
            <h1>
              coinage
            </h1>
            <CoinList
              addOpen={false}
              coinData={
                Array [
                  Object {
                    "code": "...",
                    "id": 0,
                    "name": "Loading",
                    "price": 0,
                  },
                ]
              }
              currDollar={true}
              handleDelete={[Function]}
            />
            <ControlPanel
              addOpen={false}
              handleAddCoins={[Function]}
              handleCurrency={[Function]}
              handleRefresh={[Function]}
              selectCoins={Array []}
              toggleAddOpen={[Function]}
            />
          </div>,
          <Footer />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                coinage
              </h1>,
              <CoinList
                addOpen={false}
                coinData={
                  Array [
                    Object {
                      "code": "...",
                      "id": 0,
                      "name": "Loading",
                      "price": 0,
                    },
                  ]
                }
                currDollar={true}
                handleDelete={[Function]}
              />,
              <ControlPanel
                addOpen={false}
                handleAddCoins={[Function]}
                handleCurrency={[Function]}
                handleRefresh={[Function]}
                selectCoins={Array []}
                toggleAddOpen={[Function]}
              />,
            ],
            "className": "container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "coinage",
              },
              "ref": null,
              "rendered": "coinage",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "addOpen": false,
                "coinData": Array [
                  Object {
                    "code": "...",
                    "id": 0,
                    "name": "Loading",
                    "price": 0,
                  },
                ],
                "currDollar": true,
                "handleDelete": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "addOpen": false,
                "handleAddCoins": [Function],
                "handleCurrency": [Function],
                "handleRefresh": [Function],
                "selectCoins": Array [],
                "toggleAddOpen": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
